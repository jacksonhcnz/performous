name: Build MacOS Package

on:
  # Run when called from other workflows
  workflow_call:
    inputs:
      package_complete_version:
        description: 'The output of the complete_version of the "determine_version" job from the build_and_release.yml workflow'
        required: true
        type: string
      release_id:
        description: 'The output of the "create_release" job from the build_and_release.yml workflow'
        required: true
        type: string
    secrets:
      NGROK_SSH_TOKEN:
        description: 'Token for SSH debug'
        required: false
      NGROK_SSH_PASS:
        description: 'Pass for SSH debug'
        required: false

jobs:
  # Create the MacOS dmg
  MacOS_Packages:
    name: Create MacOS dmg
    runs-on: macos-latest
    env:
      MACOS_DEPS: >-
        boost
        cairo
        cmake
        cpprestsdk
        dylibbundler
        ffmpeg@4
        fftw
        fmt
        fontconfig
        freetype
        glm
        googletest
        help2man
        icu4c
        libepoxy
        librsvg
        libxml++3
        nlohmann-json
        opencv
        openssl
        pango
        pkg-config
        portaudio
        portmidi
        sdl2
    steps:
      - name: Checkout Git
        id: checkout_git
        uses: actions/checkout@v3
        with:
          path: performous
      # brew fetch runs downloads in parallel, which is faster.
      # than letting install do it
      - name: Get full list of dependencies for cache key
        id: get_key
        run: |
          brew uninstall --force --formula ant apr apr-util argon2 aria2 aspell aws-sam-cli azure-cli bazelisk azure/bicep/bicep blackhole-2ch capstone carthage chromedriver colima composer firefox freetds gd geckodriver ghostscript gnupg go google-chrome gradle httpd hub imagemagick jasper jbig2dec jq julia kotlin krb5 libassuan libavif libeventt libidn libksba liblqr libpq libraw libslirp libssh libusb libxft libzip lima llvm@15 mad maven microsoft-edge mongodb/brew/mongodb-community@5.0 mongodb/brew/mongodb-database-tools mongosh  nginx node@18 npth oniguruma openjdk openjdk@17 opusfile p7zip packer php pinentry pipx postgresql@14 qemu r rustup-init sbt selenium-server session-manager-plugin six sox subversion swiftformat swig switchaudio-osx tcl-tk tidy-html5 unixodbc utf8proc vagrant vde virtualbox yq
          brew deps --union --formulae $MACOS_DEPS 1>homebrew-deps.txt 2>/dev/null
          echo $MACOS_DEPS | tee -a homebrew-deps.txt
          echo "HOMEBREW_ALL_DEPS=$(cat homebrew-deps.txt | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g')" >> ${GITHUB_ENV}
          echo "HOMEBREW_PREFIX_DIR=$(brew --prefix)" >> ${GITHUB_ENV}
          echo "HOMEBREW_CACHE_DIR=$(brew --cache)" >> ${GITHUB_ENV}
          echo "HOMEBREW_CELLAR_DIR=$(brew --cellar)" >> ${GITHUB_ENV}
          echo "HOMEBREW_CACHE_KEY=${{ runner.os }}-$(sw_vers -productVersion)-brew-$(shasum -a 256 ./homebrew-deps.txt | cut -d ' ' -f1)" >> ${GITHUB_ENV}
      - name: get-cached-packages
        id: get-cached-packages
        uses: Lord-Kamina/always-upload-cache/restore@refresh-cache
        continue-on-error: true
        with:
          path: |
            ${{ env.HOMEBREW_PREFIX_DIR }}/opt
            ${{ env.HOMEBREW_CELLAR_DIR }}
          key: ${{ env.HOMEBREW_CACHE_KEY }}
          fail-on-cache-miss: 'true'
        env:
          GITHUB_TOKEN: "${{ inputs.api-token }}"
      - name: Fetch and install dependencies
        if: ${{ steps.get-cached-packages.outcome == 'failure' }}
        id: fetch_deps
        run: |
          brew developer on
          brew fetch  --deps --quiet ${{ env.HOMEBREW_ALL_DEPS }}
          brew install --formula --ignore-dependencies --force --adopt ${{ env.HOMEBREW_ALL_DEPS }}
          brew cleanup
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: true
      - name: Relink Dependencies
        if: ${{ steps.get-cached-packages.outcome == 'success' }}
        id: relink_deps
        run: |
          brew unlink ${{ env.HOMEBREW_ALL_DEPS }} 2>/dev/null && brew link --overwrite ${{ env.HOMEBREW_ALL_DEPS }} 2>/dev/null
          brew list
      - name: Setup Python
        id: setup_python
        uses: actions/setup-python@v4 
        with:
            python-version: 'pypy3.9' 
            cache: 'pip'
            cache-dependency-path: "${{ github.workspace }}/performous/osx-utils/macos-bundler-requirements.txt"
      - name: save-packages-cache
        id: save-packages-cache
        uses: Lord-Kamina/always-upload-cache/save@refresh-cache
        with:
          path: |
            ${{ env.HOMEBREW_PREFIX_DIR }}/opt
            ${{ env.HOMEBREW_CELLAR_DIR }}
          key: ${{ env.HOMEBREW_CACHE_KEY }}
        env:
          GITHUB_TOKEN: "${{ inputs.api-token }}"
      - name: Build package
        id: build_package
        run: |
          cd performous/osx-utils
          chmod +x ./macos-bundler.py
          pip3 install -r ./macos-bundler-requirements.txt
          python3 ./macos-bundler.py --flat-output --package-version="${{ inputs.package_complete_version }}" --enable-webserver=on --enable-midi=on --enable-webcam=on --build-tests=on
          PACKAGE_PATH=$(ls "${{ github.workspace }}/performous/osx-utils/out/Performous-${{ inputs.package_complete_version }}.dmg")
          MASTER_PACKAGE_PATH="${{ github.workspace }}/performous/osx-utils/out/Performous-latest.dmg"
          cp -v ${PACKAGE_PATH} ${MASTER_PACKAGE_PATH}
          echo "ARTIFACT_PATH=${PACKAGE_PATH}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=$(basename ${PACKAGE_PATH})" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_PATH=${MASTER_PACKAGE_PATH}" >> ${GITHUB_ENV}
          echo "MASTER_ARTIFACT_NAME=$(basename ${MASTER_PACKAGE_PATH})" >> ${GITHUB_ENV}
      - name: Run unittests directly called.
        run: |
          cd "${{ github.workspace }}/performous/build/testing"
          ./performous_test --gtest_filter=UnitTest*
      - name: Run unittests by ctest.
        run: |
          cd "${{ github.workspace }}/performous/build"
          make test

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact with unified name
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MASTER_ARTIFACT_NAME }}
          path: ${{ env.MASTER_ARTIFACT_PATH }}

      - name: Upload artifacts to tagged release
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ inputs.release_id }}
          file: ${{ env.ARTIFACT_PATH }}
